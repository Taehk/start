day06

	NCS 체크
			ncs.go.kr -> 아래 쭉 -> 정보통신 -> 정보기술 -> 정보기술개발 -> 응용sw엔지니어링 -> 애플리케이션 설계
	
	
	
	-----------------------------------------------------------------------------
		
	for 명령 참조
		선조건 처리명령이다.
		for(;;)처럼 안의 내용을 기술하지 않아도 무방하다.
		이 때 조건식은 항상 true로 처리된다.
		
	while 명령
		선조건 처리명령.
		for명령과는 구분되게 형식 내부에 카운터변수 선언부분이 없다.
		따라서 카운터 변수로 실행횟수를 제어하고자 한다면
		반드시 명령이 시작되기 전에 카운터변수를 선언 및 초기화를 해주고
		명령({}블럭) 내부에서 증감식으로 증감하여 횟수를 제어해야 한다.
		
	do-while 명령
		후조건 처리명령.
		악조건 하에서도 적어도 한 번은 실행문을 실행하는 반복문
		
	참고)
		전역변수
			클래스 내의 어디든지 사용할 수 있는 변수
			
		지역변수 
			해당 블럭 내에서만 사용할 수 있는 변수
			
	-----------------------------------------------------------------------------
	
	flag 기법
	-->	프로그램을 실행하다보면 두가지 이상의 경우가 발생되는 순간이 존재한다.
		그 후에 어떤 경우가 발생했는지 알아보는 방법
		ex) 
			for(;;){
				
				실행내용1
				
				if(조건){
					break;
				}
					
				실행내용2
				
			}
			(1) <- 이 부분은 for명령이 종료되면 실행되는 부분
			
			실행내용1의 경우는 반복문의 마지막회차까지 모두 실행됐는지 여부는 판별하기 어렵다.
			실행내용2의 경우도 마찬가지
				이때 (1)을 실행할 때
				위의 반복문이 정상적으로 모두 반복해서 실행되었는지
				아니면 중간에 break 명령으로 종료가 되었는지를 판별해내는 기법
				
			방법 - 
				1) 시작하기 전에 변수에 특정 데이터를 기억시켜놓고
					특정 순간을 발생하면 변수의 데이터를 변경시킨다.
				2) 	(1)의 부분을 실행할때 그 변수의 데이터를 보면
					위의 반복문이 정상적으로 모두 처리되었는지
					중간에 강제 종료되었는지를 확인할 수 있게 된다.
					
-----------------------------------------------------------------------------------------

	레이블이 붙은 반복문
		
		레이블을 사용한 제어는 반드시 소속 반복문에서만 적용된다.
			* 이중 for문에서 i--; continue 레이블; 하면 현재 회차 다시 반복할 수 있다.
		사용방법)
			레이블 이름:
				for(;;){		<-- 아무리 중첩했어도 이쪽 반복문도 나가짐(break됨)
					for(;;){
						실행내용
						if(조건문){
						break/continue 레이블 이름;
						}
					}
				}
				
				ex) loop:
					for(;;){
						for(;;){
							if(조건){
							break loop; or continue loop;
							}
						}
					}
					
----------------------------------------------------------------------------------------

	continue 명령
			반복문에서만 사용되는 명령
			현재 반복을 중지하고 다음 반복을 처리하도록 하는 명령
			-> 현재 반복은 무의미하므로 작업을 중지시키고 다음 반복을 진행하도록 하는 것
			
		주의사항) 반복 명령문에 따라서 실행 위치가 달라진다.
				1. for문의 경우, continue명령을 만나면 증감식으로 실행을 진행한다.
					for(카운터변수 선언,초기화 ; 조건식; 증감식){
						if(조건) continue;
					}	
				
				2. while문의 경우, 증감식이 없기 때문에 반복문의 조건식을 실행한다.
					while(조건문){
						if(조건) continue;
					}
				 
				3. do while문의 경우, (1) -> continue -> (3) 참 ->(1) / 거짓->(4)의 순서로 진행된다.
					do {(1)
						if(조건) continue;
						(2)
				   } while(조건식(3));
				   (4)