day13

	예외처리
		=> 프로그램 상 문제가 없으나 (문법상 에러가 발생하지 않으나)
			데이터의 문제나 장비의 문제 등에 의해서 프로그램을 실행하는 도중 발생하는
			에러를 "실행 에러(Runtime Error)"라고 표현하고
			이것을 자바에서는 "예외(Exception)"이라고 말한다.
			
			이런 예외는 개발자가 예측해서
			문제가 발생했을 경우 대처하는 방식으로프로그램을 만들어야 하고
			이처럼 예외가 발생했을 경우 대처하는 방식의 프로그램을 "예외처리"라고 부른다.
			
			자바에서는 이런 문제점(예외 발생 원인을 개발자가 알고 있어야함)을 해결하기 위해서
			예외처리 문법이 존재한다.
			
			예외처리의 목적은 "정상적인 종료"에 있다.
				= 예외의 정보를 알아서 사용자에게 왜 프로그램에 문제가 생겼는지 알리고
					그 프로그램을 정상적으로 종료되도록 하는 것에 목적이 있는 경우가 많다.
			
			형식)
				(1)
				try {
					(2)
					...		// 예외가 발생할 여지가 있는 코드가 있는 장소
					(3)
				}
				catch(???) {
					(4)		// 예외 발생시 문제점을 해결하는 부분
				}
				finally {
					(5)		// 예외 발생 여부와 상관없이 반드시 실행되는 부분
				}
				(6)
				
					실행순서)
						예외발생	(1) -> (2) -> (3) -> (5) -> (6)
						예외발생X	(1) -> (2) -> (4) -> (5) -> (6)
							ㄴ (3)위치는 예외발생 시 실행하지 않는다.
							ㄴ finally 부분은 생략 가능하다(흔하진 않지만 finally가 있는 경우 catch를 생략해줄 수 있다)
			
		자바의 예외처리 원리
			예외가 발생하면 JVM은 발생한 예외의 종류를 분석한 후
			예외에 대한 정보를 클래스로 만들어서(객체)로 만들어서
			catch 부분에 그 클래스의 주소를 전달한다.
			
			예외가 발생하면 그 예외의 정보를 받아서
			개발자가 그 정보를 이용해서 원하는 처리를 해줘야 한다.
			
		다중 catch 블럭
			-> try {} 안에 예외 발생 요소가 여러가지 복합적인 요소를 가질 수 있다.
				이때 반드시 어떤 에러 때문인지를 구분해서 처리해야 한다면
				이런 경우를 대비해서 만들어 놓은 문법이 다중 catch 블럭이다.
					ㄴ 다중 catch 블럭 사용시 "반드시 실행될 수 있는 상태"로 만들어야 한다.
							= 적은 범위의 catch가 반드시 먼저 기술되어야 함
				형식)
					try{
					}
					catch(???){
					}
					catch(???){
					}
					...
					
		예외 정보 출력하기
			-> 예외의 정보를 얻는 법]
					1. 예외정보 클래스 변수를 출력하면 된다.
							ex) System.out.println(예외정보클래스변수);
									-> 예외의 원인 파악가능
					2. 예외클래스변수.printStackTrace()를 이용하는 방법
							-> 예외의 정보 + 예외가 발생하게 된 위치와 경로를 추적해서 출력한다.
							
		===================================================================================
		
		예외전이하기
			-> 함수는 프로그램에 가장 작은 단위로 한가지 작업을 하기 위해 만든 것이다.
				-> 함수 내에서 작업을 하다가 예외가 발생하면 그 함수는 더이상 실행할 필요가 없는 경우가 많다.
					-> 따라서 함수는 예외를 전이하도록 해놓은 경우가 있다.
					
				형식) 접근지정자 [속성] 반환값타입 함수이름(매개변수리스트)	throws 예외클래스1, 예외클래스2, ...{
						}
						-> 나열한 예외가 발생하면 함수 실행을 중지시킨다.
						
							***** 예외가 전이된 함수는 반드시 그 함수를 호출한 것에서 예외처리를 해줘야 한다.*****
									ㄴ try 블럭으로 감싸줘야한다.
									
								참고: 비록 어떤 함수가 예외를 전이하는 함수라도 예외처리를 하지 않아도 되는 경우가 있다.
										전이하는 예외가 RuntimeException의 하위인 경우 예외처리 해도 그만 안해도 그만이다.
											ㄴ 주로 java.lang패키지 클래스에 있는 함수들이 이런 함수가 많이 존재
												되도록 하는 편이 좋음.
												
		======================================================================================
		
		강제 예외 던지기
			JVM은 예외로 인정하지 않지만 프로그램의 목적상 예외로 인정해야 하는 경우가 있을 수 있다.
				ㄴ 원래는 예외처리가 필요하지 않지만
					ex) 나이는 음수를 입력하면 X -> JVM에게 강제로 알려주는 방법
			형식
				throw new 예외클래스이름();
					/ 예외전이 			: throws 예외클래스
					/ 예외던지기	 	: throw new 예외클래스();
				
		사용자 예외 클래스 만들기
			-> 예외 클래스는 예외의 발생 원인을 알려주는 역할을 담당
				그런데 앞에서 강제 예외 던지기는 자바가 준비한 예외가 아니므로 예외의 원인 파악이 힘듦
				
				이런 경우 예외의 원인을 파악하기 위해 예외정보를 만들어주는 클래스를 따로 만들어서 사용할 수 있다
				
				1. Exception 클래스를 상속 받은 클래스를 만든다.
				2. toString()를 오버라이딩해서 예외의 원인을 출력할 수 있도록 한다.
				