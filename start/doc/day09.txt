day09
	
	
	함수 (Method, Function)
			자바는 function이 존재할 수 없기 때문에 다 method - (다 클래스 안에 들어가야하기 때문)
					변수/함수가 객체로서 따로 구분되는 파이썬 / 자바스크립트와 다름 <-  얘네는 함수(함수);가 가능
				
		* 한 가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램
				= 기능의 최소 단위.
			프로그램? 이런 함수들이 모여서 원하는 목적을 이루도록 구성하는 것.
				
			함수 참조
		*** 함수는 누군가 호출해야만 실행이 가능하다.						***
		*** 	=> 함수 스스로가 호출되는 경우는 없다						***
		*** 함수는 실행이 완료되면 자신을 호출한 곳으로 실행순서를 넘긴다 	***
		
		* 만드는 법
			접근지정자 [속성] 반환값 타입 함수이름(매개변수리스트..) {
						함수내용
			}
				  ->	1. 속성 final / static / abstract ...
						2. 접근지정자 -> 해당 개체의 접근할 수 있는 권한을 지정해놓은 것.
						3. 함수 이름 -> 개발자가 지정하는 사용자 정의어
						4. 매개변수리스트 -> 변수 선언 형태로 만드는 것 / 갯수와는 상관없다
										  -> 함수가 원하는 작업을 하기 위해서 필요한 데이터를 지정
						5. 반환값 타입 -> 함수 실행의 목적에 해당하는 값의 타입	(반드시 없거나 1개 <- 자바에서는 그럼)
											ㄴ 결과가 존재하지 않는 경우 = 반드시 void라고 적어준다.
											ㄴ 결과가 존재하는 경우 = 해당 데이터 타입을 적어준다.
												public int, flaot abc() {} <- 절대 불가능
											종류
												void abc(){}
												void abc(int no){}
												int abc(){}
												int abc(int no){}
	
						return명령
							-> 함수 안에서 사용할 수 있는 명령
								의미) 함수 실행을 종료하세요.
									  결과가 있으면 결과를 내보내고 함수를 종료하세요.
									return;
									return 데이터;
								반환값이 void인 경우는 반드시 "return"만 사용할 수 있다. -> 이 경우는 생략 가능
											아닌 경우는 반드시 "return 데이터"만 사용가능.
	
		* 사용 방법
			함수는 반드시 호출해야만 사용할 수 있다.
			따라서 함수를 사용한다는 것은 그 함수를 호출한다는 의미가 된다.
				형식) 함수이름(데이터, ...);
								ㄴ 함수는 그 함수가 실행되기 위해 필요한 데이터를 받을 준비를 하고 있다(매개변수)
								   따라서 그 함수에 일을 시키기 위해서는 필요한 데이터를 반드시 입력해줘야 한다.
								   		-> 결론적으로 데이터(피라미터, parameter)란?
								   				함수가 준비하고 있는 매개변수 리스트에 기억할 데이터를 제공하는 것
								   			-> 데이터는 그 함수가 준비한 매개변수의 갯수와 반드시 일치해야하고
												형태, 순서 역시 일치해야 한다.
	
		* 반환값 사용 방법
			-> 함수의 실행이 종료되면 반환값을 줄 수 있다.
				이 반환값은 함수 호출 부분에 그대로 들어온다.
				
				따라서 함수 호출 부분에 예상되는 반환값을 기록해 보고
				문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
				
											   			   
		*** 함수의 오버로딩(OverLoading : 함수의 중첩) ***
				같은 이름으로 함수를 한 클래스 내에 추가하는 법  ex) substring();
					* 함수에 오버로딩을 하려는 함수가 있어야 한다.
					1. 함수 이름이 같아야 한다.
					2. 매개변수리스트가 달라야 한다.(타입, 순서, 갯수 중 하나 이상 달라야 한다.)
					3. 반환값 타입과는 무관하다. -> void, String, int 등 다 써도 됨
							-> 함수를 호출할때 정확한 함수를 선택할 수 있도록 해야한다.
								= 원하는 기능을 하는 함수가 요구하는 데이터를 형태와 순서에 맞춰서 정확하게 입력해야함.
								
						void lmn(int a,	float b){};
						void lmn(float b, int a){}; -> 순서가 바껴서 가능 O
						int	 efg(){};
						void efg(){};	-> 반환값과는 상관이 없다 X						
				
	--------------------------------------------------------------------------------------------------
				
	객체지향 (Object Oriented Programming : OOP)
		-> 클래스를 이용해서 프로그램을 만들어 나가는 언어
			ㄴ 하나의 목적을 달성하기 위해서 필요한 기능들을 모아놓은 프로그램의 기본 단위
					ex) 문자열 관리 String / 네트워크 처리 Soket
				
				* 클래스의 구성요소
					1. 변수(Field)	:	필요한 데이터를 보관하고 있어야 한다.
					2. 함수(Method)	:	뭔가를 해결하기 위한 기능이 있어야 한다.
							-> 이 두가지를 합쳐서 멤버라고 부른다.
							
				* 클래스 제작 방법
						접근지정자 [속성]  class 클래스명 {
							변수 선언;
							함수 선언;
						}
				*** 클래스는 설계도에 불과하다.
					즉, 설계도만 가지고 있다고 해서 이것이 실행되는 것이 아니다.
					반드시 클래스가 실행가능한 물건으로 만들어져야 한다.
					(메모리에 올려진 상태 ...)
					
		Object	=	Refernece	+	Instance
		(객체)		(변수)			(인스턴스)
			
			new Test06;
			Test06 t6 = new Test06();	-> 이거 2개 주소가 다름(new는 쓸때마다 새로운 heap 영역에 저장)
			
		==> 객체지향언어는 클래스를 기반으로 해서 만들어진 Object에 의해서 만들어지는 프로그램
		
	객체(Object) 만드는 방법
		-> 객체는 JVM이 만든다
			개발자는 필요한 부품을 만들어달라고 명령만 내리면 된다.			
			* 클래스 하나당 오브젝트는 여러 개를 만들어도 상관없다
					ㄴ 클래스 안에서 만들어진 변수는 new 시키는 순간 heap 영역에 만들어지기 때문에
						Heap 영역의 특성에 따라서 계속 사용할 수 있게 된다.
			형식)
				클래스이름	변수;
				변수	= new 클래스이름();
			ex)
				Test라는 클래스가 있다면
					Test t;
				 	  ㄴTest라는 클래스 타입 (= t의 Heap type이 Test), t는 레퍼런스 변수
				 	t = new Test();
				 		ㄴ new라는 명령을 통해서 클래스가 Object가 된다 (new Test(); 부분만 보면 인스턴스)
				 			컴퓨터가 물건을 만든다는 개념 = 메모리에 클래스가 만들어진다
				 	
				 	따라서 Heap에 만들어진 클래스를 Instance라고 부르고
				 	만들어진 Instance의 주소를 기억할 변수를 Reference라고 부른다.
				 	이 두개를 통칭해서 Object(객체)라고 부른다.
		
		-----------------------------------------------------------------------------------------
		
		지역변수
			-> 해당 지역에만 사용할 수 있는 변수
				 그 문장이 실행되는 순간 변수가 만들어지고
				 그 블럭을 벗어나면 그 변수는 사라진다.
		
		전역변수
			-> 모든 지역에서 사용할 수 있는 변수
				클래스 안에서 만들어진 변수는
				new 시키는 순간 heap영역에 만들어지기 때문에
				Heap 영역의 특성에 따라서 계속 사용할 수 있게 된다.
					* 탄생 시점 : new 시키는 순간 = instance가 만들어지는 순간
					* 소멸 시점 : 프로그램이 종료되는 순간
		
		
	객체 사용 방법
			객체를 사용한다는 개념은 
			그 목적을 달성하기 위해서 필요한 데이터를 기억하던지...
											기능(함수)를 이용하던지..
											
			형식)
				주소.변수;
				주소.함수(데이터)
				 ㄴ *레퍼런스 변수* (위의 예시에서 이어지는 걸로는 t)
			ex)
				Test클래스의 a 변수에 10을 기억시키겠다
					Test t = new Test();
					t.a = 10;
					t.abc();
							
	객체의 배열
			-> 하나의 클래스를 가지고 여러 개의 오브젝트를 만들 수 있으므로
				이 때 만들어지는 오브젝트를 배열로 만들어서 관리할 수 있다.
			ex) Test[] t = new Test[5]; -> Test 인스턴스들을 배열로 관리할 주소 변수를 만듦
								ㄴ 관리할 개수를 정해서 배열을 만든다.
									아직 실질적인 오브젝트는 만들지 못한 상태 = 공간만 확보해둔 상태
					class Test{
						int a;					
					}
					Test[] t = new Test[5];
						-> Test 타입의 객체를 관리할 공간만 확보한 상태
							따라서 t[0].a로 접근해서 기억된 숫자를 꺼내오지 못한다.
							
							ㄴ for(int i = 0; i < 5; i++){
									t[i] = new Test();
							   } -> 의 작업으로 실제 오브젝트를 만들어서 채워줘야 한다.
							   
				실제 사용법
					배열변수[위치값].변수이름 = 입력할 데이터;
					배열변수[위치값].함수이름();
					
						배열변수[위치값] 안에 있는 주소는 오브젝트 참조 주소이기 때문에
						.을 이용해서 접근해야 한다.
			 				-> 소속을 밝혀줘야한다.
		
					 	
				 	
		인터페이스
		추상클래스
		
		유용한 클래스들...
		
		컬렉션...
			리스트, 셋, 맵
			
		쓰레드	
		입출력
		네트워크
		
	-----------------------------------------------------------------------
	
	jdbc
	
	awt, swing - GUI 생성 클래스
	