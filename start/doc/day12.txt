day 12
	
	
	review
		상속
			이미 만들어져있는 코드를 다시 코딩하지 않고 그대로 물려받아
				추가기능은 추가하고 수정할 기능은 수정해서
				클래스를 제작해서 프로그램을 만들어나가는 기법
				
				참조형 변수) 타입을 결정하는 것은
								인스턴스에 변수 쪽 클래스의 멤버가 모두 있느냐 모자르냐...
								
				결국 상속받은 클래스의 멤버는 상속해둔 클래스의 멤버의 갯수보다 많을 것
				
		오버라이딩 규칙
				0.
				1. 함수의 원형이 일치해야한다(반환값타입 함수이름 매개변수리스트)
				2. 접근지정자는 같거나 넓은 방향으로...
						- 클래스에 사용할 수 있는 접근지정자 : 생략, public
				3. 예외처리는 같거나 좁은 방향으로...
		
		상속관계의 경우
			상위 클래스의 변수에서 함수를 호출하게 되면
			최종적으로 하위클래스에서 오버라이딩한 함수가 호출된다.
			
	----------------------------------------------------------------------------------------
	
	
	***다형성***
		하나의 변수를 이용해서 여러 형태의 클래스를 사용하도록 하는 방법
			-> 상위 클래스의 변수를 이용해서 하위클래스의 인스턴스를 이용할 수 있으며
			   이것은 상위 클래스의 변수를 이용하면
			   여러 하위클래스의 인스턴스들을 다룰 수 있다.
			   
			   하위 클래스의 인스턴스는 상위 클래스들의 레퍼런스로 사용할 수 있다
			   
			   -> 클래스의 인스턴스의 타입을 따질 때는
			      반드시 그 인스턴스에 해당 클래스가 존재하는지를 따져주면 된다
		
		
		Casting(주소의 형변환)
			원칙적으로 주소는 다른 형태로 형변환이 불가능하다.
			즉, 주소는 Heap Type 형태에 따라 주소가 결정된다.
			Heap형태가 다르면 주소를 기억할 수 없다.
			
				int[] num = new float[10] <-- X
				Test t = new Sample();		// 상속관계가 아닌 경우 불가능
				
			딱 한가지의 경우, 주소(참조형 타입)의 형변환이 가능하다.
			상속 관계에 있는 클래스끼리는 형변환이 가능하다
				-> is a 관계이기 때문
					
					자동 형변환
						하위 클래스의 주소가 상위 클래스 변수에 기억되는 것은
						자동적으로 형변환을 해준다
					
					강제 형변환
						상위 클래스의 주소가 하위 클래스의 변수에 기억되는 것은
						강제 형변환을 해줘야 한다.
					
					ex) class Father {}
						class Son extends Father{}
							Father f = new Son();	// 자동 형변환
							Son    s = new Father();	// 불가능
							
							Father f1 = new Father();
							Son s = (Son) f1; -> 강제 형변환
							
				*다형성 사용 방법
					1. 어떤 함수가 상위 클래스를 매개변수로 가지고 있으면
						하위 클래스의 인스턴스를 입력해도 상관없다.
						
						따라서 만약 어떤 함수가 Object타입으로 매개변수가 정의되어 있으면
						이 경우 Object 클래스의 인스턴스를 만들어서 함수를 호출하는 경우는 없다.
						대신 이 함수는 모든 클래스들의 인스턴스를 매개변수로 입력해도 되는 함수이다.
						
					2. 어떤 함수가 상위 클래스를 반환값으로 가지고 있으면
						반드시 원하는 하위 클래스 형태로 형변환해서 사용해야 한다.
						
							* 어떤 반환값이나 넘겨받은 데이터 타입이 Object인 경우
								그 데이터를 연산할때는 반드시 원래 가지는 타입으로
								강제 형변환해서 사용해야한다.
								
								
		===============================================================================================
		
		추상 함수
			접근지정자 abstract 반환값 함수이름(매개변수리스트);
			public abstarct void abc(int a);
			-> 함수의 몸체(블럭 {})가 없는 함수를 말한다.
				즉, 기능이 없는 함수를 말한다.
				
			
		추상 클래스
			접근지정자 abstract class 클래스명{
				변수 선언;
				일반 함수() {}
				일반 함수() {}
				일반 함수() {}
				// 추상함수는 와도 되고 아님말고 + 있으면 무조건 추상 클래스여야함				
			}
			* 쓰는 이유 : 다형성 구현을 위해 
				-> 추상 함수를 0개 이상 가지고 있는 클래스
					즉, 추상함수가 한개도 없어도 강제로 추상 클래스를 만들 수 있고
					추상함수가 한개라도 있으면 반드시 추상 클래스로 만들어야 한다.
			
			추상클래스는 new 시켜서 사용할 수 없는 클래스이다.
				ㄴ 기능이 없는 함수(추상함수)가 존재할 가능성이 있기 때문
			
			사용하는 방법	
				1. 다른 클래스에 상속해준 후 추상함수의 기능을 만들어주고
										(=> 추상함수의 블럭을 만들고 [기능을 구현하고])
					상속받은 클래스를 new 시켜서 추상 클래스의 변수에 담아서 사용하면 된다.
						-> 실무에서 이렇게 사용하는 경우는 많지 않다.
				
				2. 실무에서는 추상 클래스 안에 속성이 static이면서 반환값이 자기자신인 함수를 찾아서
					그 함수를 호출해서 인스턴스를 사용한다.
					
				
				추상 클래스가 아님에도
				생성자 함수가 존재하지 않는 것처럼 보이는 클래스가 있다.
				이 클래스는 생성자 함수가 존재하지 않는 것이 아니고, 생성자의 접근지정자를 private으로 감춰놓은 것이다.
				
				이런 경우 마찬가지로 new 시켜서 사용할 수 없고
				추상 클래스와 마찬가지로 속성이 static이면서 반환값이 자기자신인 함수를 찾아서 실행하여
				객체를 만들어 사용해야 한다.
				
				만약 자신에게 그런 함수가 없는 경우는 관련된 클래스에 그런 함수가 존재하므로 그 함수를 찾아서 호출/사용하면 된다.
				
				
				
		======================================================================================================
		
		인터페이스(Interface)
				-> 특수한 클래스의 일종
				
				특징
					1. 최상위 클래스 Object가 아니다.
						-> 상속을 받아 만들어진 클래스가 아니다. (일반 클래스는 모두 최상위 클래스가 Object)
					
					2. 인터페이스 내에는 100% 추상함수가 존재해야 한다.
						-> 절대로 일반함수가 존재하면 안된다 (만약 있다면 default라고 속성을 명시)
							기능이 구현된 함수가 존재하면 안된다. (블럭이 있는 함수가 있으면 안된다.)
							
						참고) 인터페이스 내에서는 자동적으로
								접근지정자와 속성을 기술하지 않아도 "public abstract"가 붙여지게 된다.
					
					3. 인터페이스는 다른 클래스에 상속해줄 수 있는데(반드시 상속해줘야한다.)
						다중 상속이 가능하다.
						
					4. 변수는 가질 수 있다
						이 때 이 변수는 자동적으로 "public static final"이 붙게 된다.
														ㄴ 접근지정자는 반드시 public, 속성은 반드시 static final
														
					5. 인터페이스 소속 함수는 접근지정자가 public이어야 함.
					
			추상함수와 차이점 
				- 추상함수는 일반함수가 존재함 <-> 인터페이스는 일반함수(기능을 가진 함수)가 들어와선 안됨.
				
			왜 인터페이스를 사용하나
				- 가끔 JVM에 의해 자동 호출되어야하는 함수가 필요하다.
					따라서 함수의 존재가 필요하다.
					가끔은 이 함수가 해야할 일을 개발자가 정해야 할 일이 있다.
					
					따라서 기능은 개발자의 몫으로 남긴 것.	
					
			인터페이스 사용하기
				- 인터페이스는 스스로 new 되지 못함.
					= 추상클래스와 마찬가지로 인터페이스 소속함수는 기능이 없기 때문에 new 시킬 수 없다.
						=>	따라서 일반 클래스에 상속해준다.
								ex) class 클래스명 [extends 상속해줄 클래스] implements 인터페이스이름, 인터페이스이름,..{}
														ㄴ 동시에 상속을 받을 수 있고 없으면 생략 가능
																				ㄴ 인터페이스는 다중상속이 가능
																					이 경우 모든 인터페이스 소속의
																					모든 함수를	오버라이드 해야한다.
								
								참고) 일반클래스를 상속받는 것을 "상속"이라고 표현하고ㄴ
										인터페이스를 상속받는 것을 "구현"이라고 표현함.
										
				- 상속받은 클래스에서는 인터페이스 안에 있는 함수를 전부 오버라이드해야한다. (모두 추상함수니까)
					그리고 필요한 기능을 개발자가 구현한다.
						=> 인터페이스 소속 함수는 접근지정자가 public 이다.
				
				- 상속받아 만든 일반 클래스를 new 시켜서 사용한다.
					-> 이 방법이 인터페이스를 사용하는 90% 정도의 사용 방법
							나머지 10%는 속성이 static이면서 해당 인터페이스 타입인 함수를 찾아서 사용한다.
								ㄴ 이때 추상클래스와의 차이점
										추상 클래스는 해당 클래스에 그런 함수가 존재하지만
										인터페이스의 경우는 기능을 가지는 함수가 존재하지 않기 때문
										다른 클래스 소속의 함수를 찾아야 한다.
				
				----------------------------------------------------------------------------------------
				
			내부클래스 (Inner Class)
					-> 클래스 안에 다시 클래스를 만들 수 있따
										
					* 주로 바깥 클래스와 연관된 기능을 가진 클래스를 만들고 싶을 때 많이 사용하는 방법
					* 클래스를 제작하는 것 = 소스코드파일 하나를 만드는 것
						-> 클래스의 내용이 짧으면 파일을 따로 만드는 것이 번거로울 수 있다.
							-> 그런 경우 주로 내부 클래스를 활용하면 편하다.
				
				종류
					1. Top Level Inner Class
						비록 형식은 내부 클래스이지만 독립적으로 활동하는 클래스
							ex) static class 클래스이름 {}						
								= 클래스가 내부에 있으면서 static이 붙으면 Top Level Inner Class이다.
						* 일반 클래스와 달리 "바깥클래스명.내부클래스명"의 형식이다.

					2. 전역 Inner Class
						일반 클래스를 내부 클래스로 만든 것 (일반적으로 내부클래스라고 부르는 것의 90%)
							ex) class 클래스명 {}
						* 바깥 클래스의 모든 멤버가 자기 것인양 사용할 수 있다.
						* 반드시 바깥 클래스를 new 시켜야 안쪽 클래스를 생성할 수 있다.
								ㄴ 바깥클래스주소.new 안쪽클래스명();
						* 바깥 클래스는 안쪽 클래스의 멤버를 사용할 수 없고 
									사용하기를 원하면 new 시켜서 사용해야 한다.
					
					
					3. 지역 Inner Class
						내부클래스를 만드는 위치가 바깥 클래스의 함수 안에서 만들어지는 것.
							ㄴ 함수 밖에선 사용 불가능한 클래스
						* 전역 내부 클래스와 유사하게 바깥 클래스의 멤버를 활용할 수 있다.
						* 이 클래스는 다른 곳에는 new 시킬 수 없다.
							ㄴ 오직 그 함수 안에서만 new 시킬 수 있다.
						
					4. 무명 Inner Class
						이름이 없는 내부 클래스
							클래스를 new 시키는 순간 오버라이드해서 사용하는 방법							
							* 프로그램을 제작하다보면 클래스의 기능 수정을 위해서 오버라이드 해야하는 경우가 있다
								(or 인터페이스나 추상함수를 사용할 때)
							 	원래는 상속을 받아서 다른 클래스를 만들고
							 	 그 클래스를 객체로 만든 후 사용해야한다.
							 		-> 간단한 작업을 위해 번거로운 작업을 하지 않기 위해서
							 	       * 클래스를 new 시키는 순간 오버라이드해서 사용하는 방법
							* 사용자가 클래스 이름을 만들지 않아도 된다.
							* 그런 의미에서 무명 내부 클래스라고 한다.
							
							형식) new 인터페이스명(){
										추상함수 오버라이드...
								  }
							 	  new 추상클래스명(){
							 	  		추상함수 오버라이드...
							 	  }
			**********************************************************
					class Test{
							int a;
							class Inner{}  -> 전역 내부 클래스
							void abc(){
								int no = 0;
								class Inner02 {	-> 지역 내부 클래스
								}
							}	
						}
			***************************************************************
										